%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 177.000000 136.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.5 (Build 16F73) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 177 136
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 177 136
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
0 0 0 0 setcmykcolor
q
0 0 177 136 rc
42.556988 18.993401 m
59.044487 18.993401 l
59.044487 35.480499 l
42.556988 35.480499 l
h
42.556988 18.993401 m
f
1 J
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
261.05698 445.50659 m
277.54449 445.50659 l
277.54449 429.0195 l
261.05698 429.0195 l
h
261.05698 445.50659 m
S
0 0 0 0 setcmykcolor
CM
42.556988 51.967999 m
59.044487 51.967999 l
59.044487 68.455101 l
42.556988 68.455101 l
h
42.556988 51.967999 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
261.05698 412.53201 m
277.54449 412.53201 l
277.54449 396.04489 l
261.05698 396.04489 l
h
261.05698 412.53201 m
S
0 0 0 0 setcmykcolor
CM
42.556988 84.943001 m
59.044487 84.943001 l
59.044487 101.4301 l
42.556988 101.4301 l
h
42.556988 84.943001 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
261.05698 379.55701 m
277.54449 379.55701 l
277.54449 363.06989 l
261.05698 363.06989 l
h
261.05698 379.55701 m
S
0 0 0 0 setcmykcolor
CM
59.044487 2.5058589 m
75.531586 2.5058589 l
75.531586 18.993359 l
59.044487 18.993359 l
h
59.044487 2.5058589 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
277.54449 461.99414 m
294.03159 461.99414 l
294.03159 445.50665 l
277.54449 445.50665 l
h
277.54449 461.99414 m
S
0 0 0 0 setcmykcolor
CM
59.044487 35.480499 m
75.531586 35.480499 l
75.531586 51.967999 l
59.044487 51.967999 l
h
59.044487 35.480499 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
277.54449 429.0195 m
294.03159 429.0195 l
294.03159 412.53201 l
277.54449 412.53201 l
h
277.54449 429.0195 m
S
0 0 0 0 setcmykcolor
CM
59.044487 68.455101 m
75.531586 68.455101 l
75.531586 84.943001 l
59.044487 84.943001 l
h
59.044487 68.455101 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
277.54449 396.04489 m
294.03159 396.04489 l
294.03159 379.55701 l
277.54449 379.55701 l
h
277.54449 396.04489 m
S
0 0 0 0 setcmykcolor
CM
59.044487 101.4301 m
75.531586 101.4301 l
75.531586 117.9176 l
59.044487 117.9176 l
h
59.044487 101.4301 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
277.54449 363.06989 m
294.03159 363.06989 l
294.03159 346.5824 l
277.54449 346.5824 l
h
277.54449 363.06989 m
S
0 0 0 0 setcmykcolor
CM
75.531586 18.993401 m
92.019089 18.993401 l
92.019089 35.480499 l
75.531586 35.480499 l
h
75.531586 18.993401 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
294.03159 445.50659 m
310.51907 445.50659 l
310.51907 429.0195 l
294.03159 429.0195 l
h
294.03159 445.50659 m
S
0 0 0 0 setcmykcolor
CM
75.531586 51.967999 m
92.019089 51.967999 l
92.019089 68.455101 l
75.531586 68.455101 l
h
75.531586 51.967999 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
294.03159 412.53201 m
310.51907 412.53201 l
310.51907 396.04489 l
294.03159 396.04489 l
h
294.03159 412.53201 m
S
0 0 0 0 setcmykcolor
CM
75.531586 84.943001 m
92.019089 84.943001 l
92.019089 101.4301 l
75.531586 101.4301 l
h
75.531586 84.943001 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
294.03159 379.55701 m
310.51907 379.55701 l
310.51907 363.06989 l
294.03159 363.06989 l
h
294.03159 379.55701 m
S
0 0 0 0 setcmykcolor
CM
75.531586 117.918 m
92.019089 117.918 l
92.019089 134.40511 l
75.531586 134.40511 l
h
75.531586 117.918 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
294.03159 346.582 m
310.51907 346.582 l
310.51907 330.09491 l
294.03159 330.09491 l
h
294.03159 346.582 m
S
0 0 0 0 setcmykcolor
CM
92.019089 2.5058589 m
108.50658 2.5058589 l
108.50658 18.993359 l
92.019089 18.993359 l
h
92.019089 2.5058589 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
310.51907 461.99414 m
327.00659 461.99414 l
327.00659 445.50665 l
310.51907 445.50665 l
h
310.51907 461.99414 m
S
0 0 0 0 setcmykcolor
CM
92.019089 35.480499 m
108.50658 35.480499 l
108.50658 51.967999 l
92.019089 51.967999 l
h
92.019089 35.480499 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
310.51907 429.0195 m
327.00659 429.0195 l
327.00659 412.53201 l
310.51907 412.53201 l
h
310.51907 429.0195 m
S
0 0 0 0 setcmykcolor
CM
92.019089 68.455101 m
108.50658 68.455101 l
108.50658 84.943001 l
92.019089 84.943001 l
h
92.019089 68.455101 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
310.51907 396.04489 m
327.00659 396.04489 l
327.00659 379.55701 l
310.51907 379.55701 l
h
310.51907 396.04489 m
S
0 0 0 0 setcmykcolor
CM
92.019089 101.4301 m
108.50658 101.4301 l
108.50658 117.9176 l
92.019089 117.9176 l
h
92.019089 101.4301 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
310.51907 363.06989 m
327.00659 363.06989 l
327.00659 346.5824 l
310.51907 346.5824 l
h
310.51907 363.06989 m
S
0 0 0 0 setcmykcolor
CM
108.50699 18.993401 m
124.99448 18.993401 l
124.99448 35.480499 l
108.50699 35.480499 l
h
108.50699 18.993401 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
327.00699 445.50659 m
343.49448 445.50659 l
343.49448 429.0195 l
327.00699 429.0195 l
h
327.00699 445.50659 m
S
0 0 0 0 setcmykcolor
CM
108.50699 51.967999 m
124.99448 51.967999 l
124.99448 68.455101 l
108.50699 68.455101 l
h
108.50699 51.967999 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
327.00699 412.53201 m
343.49448 412.53201 l
343.49448 396.04489 l
327.00699 396.04489 l
h
327.00699 412.53201 m
S
0 0 0 0 setcmykcolor
CM
108.50699 84.943001 m
124.99448 84.943001 l
124.99448 101.4301 l
108.50699 101.4301 l
h
108.50699 84.943001 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
327.00699 379.55701 m
343.49448 379.55701 l
343.49448 363.06989 l
327.00699 363.06989 l
h
327.00699 379.55701 m
S
0 0 0 0 setcmykcolor
CM
108.50699 117.918 m
124.99448 117.918 l
124.99448 134.40511 l
108.50699 134.40511 l
h
108.50699 117.918 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
327.00699 346.582 m
343.49448 346.582 l
343.49448 330.09491 l
327.00699 330.09491 l
h
327.00699 346.582 m
S
0 0 0 0 setcmykcolor
CM
124.99399 2.5058589 m
141.48108 2.5058589 l
141.48108 18.993359 l
124.99399 18.993359 l
h
124.99399 2.5058589 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
343.49399 461.99414 m
359.98108 461.99414 l
359.98108 445.50665 l
343.49399 445.50665 l
h
343.49399 461.99414 m
S
0 0 0 0 setcmykcolor
CM
124.99399 35.480499 m
141.48108 35.480499 l
141.48108 51.967999 l
124.99399 51.967999 l
h
124.99399 35.480499 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
343.49399 429.0195 m
359.98108 429.0195 l
359.98108 412.53201 l
343.49399 412.53201 l
h
343.49399 429.0195 m
S
0 0 0 0 setcmykcolor
CM
124.99399 68.455101 m
141.48108 68.455101 l
141.48108 84.943001 l
124.99399 84.943001 l
h
124.99399 68.455101 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
343.49399 396.04489 m
359.98108 396.04489 l
359.98108 379.55701 l
343.49399 379.55701 l
h
343.49399 396.04489 m
S
0 0 0 0 setcmykcolor
CM
124.99399 101.4301 m
141.48108 101.4301 l
141.48108 117.9176 l
124.99399 117.9176 l
h
124.99399 101.4301 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
343.49399 363.06989 m
359.98108 363.06989 l
359.98108 346.5824 l
343.49399 346.5824 l
h
343.49399 363.06989 m
S
0 0 0 0 setcmykcolor
CM
141.48099 18.993401 m
157.96849 18.993401 l
157.96849 35.480499 l
141.48099 35.480499 l
h
141.48099 18.993401 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
359.98099 445.50659 m
376.46848 445.50659 l
376.46848 429.0195 l
359.98099 429.0195 l
h
359.98099 445.50659 m
S
0 0 0 0 setcmykcolor
CM
141.48099 51.967999 m
157.96849 51.967999 l
157.96849 68.455101 l
141.48099 68.455101 l
h
141.48099 51.967999 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
359.98099 412.53201 m
376.46848 412.53201 l
376.46848 396.04489 l
359.98099 396.04489 l
h
359.98099 412.53201 m
S
0 0 0 0 setcmykcolor
CM
141.48099 84.943001 m
157.96849 84.943001 l
157.96849 101.4301 l
141.48099 101.4301 l
h
141.48099 84.943001 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
359.98099 379.55701 m
376.46848 379.55701 l
376.46848 363.06989 l
359.98099 363.06989 l
h
359.98099 379.55701 m
S
0 0 0 0 setcmykcolor
CM
141.48099 117.918 m
157.96849 117.918 l
157.96849 134.40511 l
141.48099 134.40511 l
h
141.48099 117.918 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
359.98099 346.582 m
376.46848 346.582 l
376.46848 330.09491 l
359.98099 330.09491 l
h
359.98099 346.582 m
S
0 0 0 0 setcmykcolor
CM
157.96898 35.480499 m
174.45648 35.480499 l
174.45648 51.967999 l
157.96898 51.967999 l
h
157.96898 35.480499 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
376.46899 429.0195 m
392.95648 429.0195 l
392.95648 412.53201 l
376.46899 412.53201 l
h
376.46899 429.0195 m
S
0 0 0 0 setcmykcolor
CM
157.96898 68.455101 m
174.45648 68.455101 l
174.45648 84.943001 l
157.96898 84.943001 l
h
157.96898 68.455101 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
376.46899 396.04489 m
392.95648 396.04489 l
392.95648 379.55701 l
376.46899 379.55701 l
h
376.46899 396.04489 m
S
0 0 0 0 setcmykcolor
CM
157.96898 101.4301 m
174.45648 101.4301 l
174.45648 117.9176 l
157.96898 117.9176 l
h
157.96898 101.4301 m
f
1 0 0 0 setcmykcolor
1 0 0 -1 -218 464 cm
376.46899 363.06989 m
392.95648 363.06989 l
392.95648 346.5824 l
376.46899 346.5824 l
h
376.46899 363.06989 m
S
CM
42.556988 2.5058589 m
59.044487 2.5058589 l
59.044487 18.993359 l
42.556988 18.993359 l
h
42.556988 2.5058589 m
f
1 0 0 -1 -218 464 cm
261.05698 461.99414 m
277.54449 461.99414 l
277.54449 445.50665 l
261.05698 445.50665 l
h
261.05698 461.99414 m
S
CM
42.556988 35.480499 m
59.044487 35.480499 l
59.044487 51.967999 l
42.556988 51.967999 l
h
42.556988 35.480499 m
f
1 0 0 -1 -218 464 cm
261.05698 429.0195 m
277.54449 429.0195 l
277.54449 412.53201 l
261.05698 412.53201 l
h
261.05698 429.0195 m
S
CM
42.556988 68.455101 m
59.044487 68.455101 l
59.044487 84.943001 l
42.556988 84.943001 l
h
42.556988 68.455101 m
f
1 0 0 -1 -218 464 cm
261.05698 396.04489 m
277.54449 396.04489 l
277.54449 379.55701 l
261.05698 379.55701 l
h
261.05698 396.04489 m
S
CM
42.556988 101.4301 m
59.044487 101.4301 l
59.044487 117.9176 l
42.556988 117.9176 l
h
42.556988 101.4301 m
f
1 0 0 -1 -218 464 cm
261.05698 363.06989 m
277.54449 363.06989 l
277.54449 346.5824 l
261.05698 346.5824 l
h
261.05698 363.06989 m
S
CM
59.044487 18.993401 m
75.531586 18.993401 l
75.531586 35.480499 l
59.044487 35.480499 l
h
59.044487 18.993401 m
f
1 0 0 -1 -218 464 cm
277.54449 445.50659 m
294.03159 445.50659 l
294.03159 429.0195 l
277.54449 429.0195 l
h
277.54449 445.50659 m
S
CM
59.044487 51.967999 m
75.531586 51.967999 l
75.531586 68.455101 l
59.044487 68.455101 l
h
59.044487 51.967999 m
f
1 0 0 -1 -218 464 cm
277.54449 412.53201 m
294.03159 412.53201 l
294.03159 396.04489 l
277.54449 396.04489 l
h
277.54449 412.53201 m
S
CM
59.044487 84.943001 m
75.531586 84.943001 l
75.531586 101.4301 l
59.044487 101.4301 l
h
59.044487 84.943001 m
f
1 0 0 -1 -218 464 cm
277.54449 379.55701 m
294.03159 379.55701 l
294.03159 363.06989 l
277.54449 363.06989 l
h
277.54449 379.55701 m
S
CM
59.044487 117.918 m
75.531586 117.918 l
75.531586 134.40511 l
59.044487 134.40511 l
h
59.044487 117.918 m
f
1 0 0 -1 -218 464 cm
277.54449 346.582 m
294.03159 346.582 l
294.03159 330.09491 l
277.54449 330.09491 l
h
277.54449 346.582 m
S
CM
75.531586 2.5058589 m
92.019089 2.5058589 l
92.019089 18.993359 l
75.531586 18.993359 l
h
75.531586 2.5058589 m
f
1 0 0 -1 -218 464 cm
294.03159 461.99414 m
310.51907 461.99414 l
310.51907 445.50665 l
294.03159 445.50665 l
h
294.03159 461.99414 m
S
CM
75.531586 35.480499 m
92.019089 35.480499 l
92.019089 51.967999 l
75.531586 51.967999 l
h
75.531586 35.480499 m
f
1 0 0 -1 -218 464 cm
294.03159 429.0195 m
310.51907 429.0195 l
310.51907 412.53201 l
294.03159 412.53201 l
h
294.03159 429.0195 m
S
CM
75.531586 68.455101 m
92.019089 68.455101 l
92.019089 84.943001 l
75.531586 84.943001 l
h
75.531586 68.455101 m
f
1 0 0 -1 -218 464 cm
294.03159 396.04489 m
310.51907 396.04489 l
310.51907 379.55701 l
294.03159 379.55701 l
h
294.03159 396.04489 m
S
CM
75.531586 101.4301 m
92.019089 101.4301 l
92.019089 117.9176 l
75.531586 117.9176 l
h
75.531586 101.4301 m
f
1 0 0 -1 -218 464 cm
294.03159 363.06989 m
310.51907 363.06989 l
310.51907 346.5824 l
294.03159 346.5824 l
h
294.03159 363.06989 m
S
CM
92.019089 18.993401 m
108.50658 18.993401 l
108.50658 35.480499 l
92.019089 35.480499 l
h
92.019089 18.993401 m
f
1 0 0 -1 -218 464 cm
310.51907 445.50659 m
327.00659 445.50659 l
327.00659 429.0195 l
310.51907 429.0195 l
h
310.51907 445.50659 m
S
CM
92.019089 51.967999 m
108.50658 51.967999 l
108.50658 68.455101 l
92.019089 68.455101 l
h
92.019089 51.967999 m
f
1 0 0 -1 -218 464 cm
310.51907 412.53201 m
327.00659 412.53201 l
327.00659 396.04489 l
310.51907 396.04489 l
h
310.51907 412.53201 m
S
CM
92.019089 84.943001 m
108.50658 84.943001 l
108.50658 101.4301 l
92.019089 101.4301 l
h
92.019089 84.943001 m
f
1 0 0 -1 -218 464 cm
310.51907 379.55701 m
327.00659 379.55701 l
327.00659 363.06989 l
310.51907 363.06989 l
h
310.51907 379.55701 m
S
CM
92.019089 117.918 m
108.50658 117.918 l
108.50658 134.40511 l
92.019089 134.40511 l
h
92.019089 117.918 m
f
1 0 0 -1 -218 464 cm
310.51907 346.582 m
327.00659 346.582 l
327.00659 330.09491 l
310.51907 330.09491 l
h
310.51907 346.582 m
S
CM
108.50699 2.5058589 m
124.99448 2.5058589 l
124.99448 18.993359 l
108.50699 18.993359 l
h
108.50699 2.5058589 m
f
1 0 0 -1 -218 464 cm
327.00699 461.99414 m
343.49448 461.99414 l
343.49448 445.50665 l
327.00699 445.50665 l
h
327.00699 461.99414 m
S
CM
108.50699 35.480499 m
124.99448 35.480499 l
124.99448 51.967999 l
108.50699 51.967999 l
h
108.50699 35.480499 m
f
1 0 0 -1 -218 464 cm
327.00699 429.0195 m
343.49448 429.0195 l
343.49448 412.53201 l
327.00699 412.53201 l
h
327.00699 429.0195 m
S
CM
108.50699 68.455101 m
124.99448 68.455101 l
124.99448 84.943001 l
108.50699 84.943001 l
h
108.50699 68.455101 m
f
1 0 0 -1 -218 464 cm
327.00699 396.04489 m
343.49448 396.04489 l
343.49448 379.55701 l
327.00699 379.55701 l
h
327.00699 396.04489 m
S
CM
108.50699 101.4301 m
124.99448 101.4301 l
124.99448 117.9176 l
108.50699 117.9176 l
h
108.50699 101.4301 m
f
1 0 0 -1 -218 464 cm
327.00699 363.06989 m
343.49448 363.06989 l
343.49448 346.5824 l
327.00699 346.5824 l
h
327.00699 363.06989 m
S
CM
124.99399 18.993401 m
141.48108 18.993401 l
141.48108 35.480499 l
124.99399 35.480499 l
h
124.99399 18.993401 m
f
1 0 0 -1 -218 464 cm
343.49399 445.50659 m
359.98108 445.50659 l
359.98108 429.0195 l
343.49399 429.0195 l
h
343.49399 445.50659 m
S
CM
124.99399 51.967999 m
141.48108 51.967999 l
141.48108 68.455101 l
124.99399 68.455101 l
h
124.99399 51.967999 m
f
1 0 0 -1 -218 464 cm
343.49399 412.53201 m
359.98108 412.53201 l
359.98108 396.04489 l
343.49399 396.04489 l
h
343.49399 412.53201 m
S
CM
124.99399 84.943001 m
141.48108 84.943001 l
141.48108 101.4301 l
124.99399 101.4301 l
h
124.99399 84.943001 m
f
1 0 0 -1 -218 464 cm
343.49399 379.55701 m
359.98108 379.55701 l
359.98108 363.06989 l
343.49399 363.06989 l
h
343.49399 379.55701 m
S
CM
124.99399 117.918 m
141.48108 117.918 l
141.48108 134.40511 l
124.99399 134.40511 l
h
124.99399 117.918 m
f
1 0 0 -1 -218 464 cm
343.49399 346.582 m
359.98108 346.582 l
359.98108 330.09491 l
343.49399 330.09491 l
h
343.49399 346.582 m
S
CM
141.48099 2.5058589 m
157.96849 2.5058589 l
157.96849 18.993359 l
141.48099 18.993359 l
h
141.48099 2.5058589 m
f
1 0 0 -1 -218 464 cm
359.98099 461.99414 m
376.46848 461.99414 l
376.46848 445.50665 l
359.98099 445.50665 l
h
359.98099 461.99414 m
S
CM
141.48099 35.480499 m
157.96849 35.480499 l
157.96849 51.967999 l
141.48099 51.967999 l
h
141.48099 35.480499 m
f
1 0 0 -1 -218 464 cm
359.98099 429.0195 m
376.46848 429.0195 l
376.46848 412.53201 l
359.98099 412.53201 l
h
359.98099 429.0195 m
S
CM
141.48099 68.455101 m
157.96849 68.455101 l
157.96849 84.943001 l
141.48099 84.943001 l
h
141.48099 68.455101 m
f
1 0 0 -1 -218 464 cm
359.98099 396.04489 m
376.46848 396.04489 l
376.46848 379.55701 l
359.98099 379.55701 l
h
359.98099 396.04489 m
S
CM
141.48099 101.4301 m
157.96849 101.4301 l
157.96849 117.9176 l
141.48099 117.9176 l
h
141.48099 101.4301 m
f
1 0 0 -1 -218 464 cm
359.98099 363.06989 m
376.46848 363.06989 l
376.46848 346.5824 l
359.98099 346.5824 l
h
359.98099 363.06989 m
S
CM
157.96898 18.993401 m
174.45648 18.993401 l
174.45648 35.480499 l
157.96898 35.480499 l
h
157.96898 18.993401 m
f
1 0 0 -1 -218 464 cm
376.46899 445.50659 m
392.95648 445.50659 l
392.95648 429.0195 l
376.46899 429.0195 l
h
376.46899 445.50659 m
S
CM
157.96898 51.967999 m
174.45648 51.967999 l
174.45648 68.455101 l
157.96898 68.455101 l
h
157.96898 51.967999 m
f
1 0 0 -1 -218 464 cm
376.46899 412.53201 m
392.95648 412.53201 l
392.95648 396.04489 l
376.46899 396.04489 l
h
376.46899 412.53201 m
S
CM
157.96898 84.943001 m
174.45648 84.943001 l
174.45648 101.4301 l
157.96898 101.4301 l
h
157.96898 84.943001 m
f
1 0 0 -1 -218 464 cm
376.46899 379.55701 m
392.95648 379.55701 l
392.95648 363.06989 l
376.46899 363.06989 l
h
376.46899 379.55701 m
S
CM
157.96898 117.918 m
174.45648 117.918 l
174.45648 134.40511 l
157.96898 134.40511 l
h
157.96898 117.918 m
f
1 0 0 -1 -218 464 cm
376.46899 346.582 m
392.95648 346.582 l
392.95648 330.09491 l
376.46899 330.09491 l
h
376.46899 346.582 m
S
0 0 0 1 setcmykcolor
CM
0.45662716 68.360497 m
16.943727 68.360497 l
16.943727 84.847603 l
0.45662716 84.847603 l
h
0.45662716 68.360497 m
f
16.943787 68.360497 m
33.431286 68.360497 l
33.431286 84.847603 l
16.943787 84.847603 l
h
16.943787 68.360497 m
f
0 0 0 0 setcmykcolor
25.289486 78.765999 m
26.163687 78.765999 26.872686 79.474998 26.872686 80.349197 c
26.872686 81.223396 26.163687 81.932404 25.289486 81.932404 c
24.414785 81.932404 23.706285 81.223396 23.706285 80.349197 c
23.706285 79.474998 24.414785 78.765999 25.289486 78.765999 c
h
25.289486 78.765999 m
f
25.289486 70.827003 m
26.163687 70.827003 26.872686 71.535896 26.872686 72.410896 c
26.872686 73.285202 26.163687 73.994102 25.289486 73.994102 c
24.414785 73.994102 23.706285 73.285202 23.706285 72.410896 c
23.706285 71.535896 24.414785 70.827003 25.289486 70.827003 c
h
25.289486 70.827003 m
f
8.7511559 75.021103 m
9.6253757 75.021103 10.334386 75.729698 10.334386 76.603897 c
10.334386 77.4785 9.6253757 78.187103 8.7511559 78.187103 c
7.8765464 78.187103 7.1679564 77.4785 7.1679564 76.603897 c
7.1679564 75.729698 7.8765464 75.021103 8.7511559 75.021103 c
h
8.7511559 75.021103 m
f
2 J
1 0 0 -1 -218 464 cm
235.44379 380.77579 m
235.44379 395.15161 l
S
1 J
/Cs1 SC
0 0.57284999 0.82087702 sc
261 346.48749 m
277.48749 346.48749 l
277.48749 330 l
261 330 l
h
261 346.48749 m
S
376.46988 461.99408 m
392.9574 461.99408 l
392.9574 445.50659 l
376.46988 445.50659 l
h
376.46988 461.99408 m
S
ep
end
%%Trailer
%%EOF
